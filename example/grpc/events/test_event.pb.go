// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test_event.proto

/*
Package events is a generated protocol buffer package.

It is generated from these files:
	test_event.proto

It has these top-level messages:
	Params
	TestEvent
*/
package events

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Params struct {
}

func (m *Params) Reset()                    { *m = Params{} }
func (m *Params) String() string            { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()               {}
func (*Params) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type TestEvent struct {
	Text string `protobuf:"bytes,1,opt,name=Text" json:"Text,omitempty"`
}

func (m *TestEvent) Reset()                    { *m = TestEvent{} }
func (m *TestEvent) String() string            { return proto.CompactTextString(m) }
func (*TestEvent) ProtoMessage()               {}
func (*TestEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TestEvent) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "events.Params")
	proto.RegisterType((*TestEvent)(nil), "events.TestEvent")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventSubscriber service

type EventSubscriberClient interface {
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (EventSubscriber_SubscribeClient, error)
}

type eventSubscriberClient struct {
	cc *grpc.ClientConn
}

func NewEventSubscriberClient(cc *grpc.ClientConn) EventSubscriberClient {
	return &eventSubscriberClient{cc}
}

func (c *eventSubscriberClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (EventSubscriber_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EventSubscriber_serviceDesc.Streams[0], c.cc, "/events.EventSubscriber/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventSubscriberSubscribeClient{stream}
	return x, nil
}

type EventSubscriber_SubscribeClient interface {
	Send(*Params) error
	Recv() (*TestEvent, error)
	grpc.ClientStream
}

type eventSubscriberSubscribeClient struct {
	grpc.ClientStream
}

func (x *eventSubscriberSubscribeClient) Send(m *Params) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventSubscriberSubscribeClient) Recv() (*TestEvent, error) {
	m := new(TestEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EventSubscriber service

type EventSubscriberServer interface {
	Subscribe(EventSubscriber_SubscribeServer) error
}

func RegisterEventSubscriberServer(s *grpc.Server, srv EventSubscriberServer) {
	s.RegisterService(&_EventSubscriber_serviceDesc, srv)
}

func _EventSubscriber_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventSubscriberServer).Subscribe(&eventSubscriberSubscribeServer{stream})
}

type EventSubscriber_SubscribeServer interface {
	Send(*TestEvent) error
	Recv() (*Params, error)
	grpc.ServerStream
}

type eventSubscriberSubscribeServer struct {
	grpc.ServerStream
}

func (x *eventSubscriberSubscribeServer) Send(m *TestEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventSubscriberSubscribeServer) Recv() (*Params, error) {
	m := new(Params)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EventSubscriber_serviceDesc = grpc.ServiceDesc{
	ServiceName: "events.EventSubscriber",
	HandlerType: (*EventSubscriberServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _EventSubscriber_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test_event.proto",
}

func init() { proto.RegisterFile("test_event.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x49, 0x2d, 0x2e,
	0x89, 0x4f, 0x2d, 0x4b, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03, 0x73,
	0x8a, 0x95, 0x38, 0xb8, 0xd8, 0x02, 0x12, 0x8b, 0x12, 0x73, 0x8b, 0x95, 0xe4, 0xb9, 0x38, 0x43,
	0x52, 0x8b, 0x4b, 0x5c, 0x41, 0xe2, 0x42, 0x42, 0x5c, 0x2c, 0x21, 0xa9, 0x15, 0x25, 0x12, 0x8c,
	0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x91, 0x3b, 0x17, 0x3f, 0x58, 0x32, 0xb8, 0x34, 0xa9,
	0x38, 0xb9, 0x28, 0x33, 0x29, 0xb5, 0x48, 0xc8, 0x84, 0x8b, 0x13, 0xce, 0x13, 0xe2, 0xd3, 0x83,
	0x98, 0xa9, 0x07, 0x31, 0x50, 0x4a, 0x10, 0xc6, 0x87, 0x1b, 0xab, 0xc4, 0xa0, 0xc1, 0x68, 0xc0,
	0x98, 0xc4, 0x06, 0x76, 0x82, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x49, 0x44, 0x70, 0x73, 0x96,
	0x00, 0x00, 0x00,
}
